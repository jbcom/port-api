name: Publish to Package Repositories

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        language: [python, node, java, typescript, csharp, go]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Set up Java
        if: matrix.language == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: '11'

      - name: Set up .NET
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '5.0.x'

      - name: Install dependencies (Python)
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies (Node/TypeScript)
        if: matrix.language == 'node' || matrix.language == 'typescript'
        run: pnpm install

      - name: Build and publish package (Python)
        if: matrix.language == 'python'
        run: |
          poetry build
          poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      - name: Build and publish package (Node/TypeScript)
        if: matrix.language == 'node' || matrix.language == 'typescript'
        run: |
          pnpm run build
          pnpm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build and publish package (Java)
        if: matrix.language == 'java'
        run: |
          ./gradlew build publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish package (.NET)
        if: matrix.language == 'csharp'
        run: |
          dotnet build
          dotnet nuget push
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Build and publish package (Go)
        if: matrix.language == 'go'
        run: |
          go build ./...
          GOPROXY=proxy.golang.org go list -m example.com/mymodule@v1.0.0
        env:
          GOPROXY: proxy.golang.org
